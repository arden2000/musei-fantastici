@page "/allmuseums"
@using Radzen
@using musei.Data
@inject CosmosService cs
@inject Session sess

<style>
    .flexColumn {
        display: flex;
        flex-direction: column;
    }

    .flexRow {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
    }

    eventNewsList {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    body {
        padding: 20px;
    }

    .refreshButton {
        position: fixed;
        bottom: 20px;
        right: 20px;
        text-align: center;
        height: 40px;
        width: 40px;
        border-radius: 10px;
    }
</style>

<body>
    <div>
        <RadzenButton class="refreshButton" IsBusy=@isRefreshing Variant="Variant.Flat" ButtonStyle="ButtonStyle.Danger"
                      Click=@(args => OnClickRefresh()) Icon="refresh"/>
    </div>
    <div class="flexColumn">
        <div class="museumList">
            @if (cs.museums.Count == 0 || isRefreshing)
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            }
            else
            {
                @foreach (Museum mus in cs.museums.Values)
                {
                    if (sess.currentUser != null && sess.currentUser.isAdmin)
                    {
                        <MuseumCardAdmin m=mus />
                    }
                    else
                    {
                        <MuseumCardClient m=mus />
                    }
                }
            }
        </div>
    </div>

</body>



@code{
    public bool isRefreshing = false;

    async void OnClickRefresh()
    {
        isRefreshing = true;
        StateHasChanged();
        Console.WriteLine("Refresh");
        //cs.museums = await cs.GetMuseums();
        //cs.events = await cs.GetEvents();
        isRefreshing = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await cs.GetMuseums();
    }
}
