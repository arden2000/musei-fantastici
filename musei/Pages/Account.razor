@page "/account"
@using Radzen
@using musei.Data
@using Microsoft.Maui.Graphics
@using Microsoft.Maui.Layouts
@inject CosmosService cs
@inject Session sess
@inject NotificationService NotificationService


<style>
    body {
        padding: 20px;
    }

    .flexRow {
        display: flex;
        flex-direction: row;
        justify-content: stretch;
        margin-bottom: 20px;
    }

    .rightAlign {
        margin-left: auto;
        margin-right: 0;
        align-content: center;
        justify-content: center;
    }

    img {
        max-width: 100%;
        border-radius: 20px;
    }

    .bottom {
        position: absolute;
        bottom: 40px;
        right: 40px;
        text-align: right;
    }
</style>

<RadzenNotification />


@if (sess.currentUser == null)
{
    <body style="margin-top: 200px;">
        <div>
            @if (loggingIn)
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            }
            <RadzenText TextStyle="TextStyle.H3"
                        TextAlign="TextAlign.Center" Style="color: #F52D11"><strong>Musei Fantastici</strong></RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" Style="margin-bottom: 20px"
                        TextAlign="TextAlign.Center">Log in with your account and catch up on events personalized to you!</RadzenText>
            <RadzenTemplateForm Submit=@OnLogin
                                InvalidSubmit=@OnInvalidSubmit
                                TItem="UserInfo"
                                Data=@userInfo>


                @*<RadzenLogin UserText="Email" LoginText="Log In" Login=@(args => OnLogin(args))
                             Register=@(args => OnRegister("Login with register and password reset")) />*@


                <RadzenCard Class="rz-border-base-0 rz-shadow-0" Style="margin-top: 20px">
                    <RadzenTextBox Style="margin: 5px; border-radius: 10px" Placeholder="Email" @bind-Value=@userInfo.username
                                   Class="w-100" Name="email" />
                    <RadzenRequiredValidator Component="email" Text="Email is required" Popup=false Style="position: static" />
                    <RadzenPassword Style="margin: 5px; border-radius: 10px" Placeholder="Password" @bind-Value=@userInfo.password
                                    Class="w-100" Name="password" />
                    <RadzenRequiredValidator Component="password" Text="Password is required" Popup=false Style="position: static" />
                </RadzenCard>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Log In" Style="width: 100%;"
                              ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" />

            </RadzenTemplateForm>
            <div class="bottom">
                <RadzenText Style="color: #F52D11">Don't have an account yet?</RadzenText>
                <RadzenButton Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger"
                              Click=@(args => OnRegister("Login with register")) Text="Sign Up" />
            </div>
        </div>
    </body>
}
else
{
<body>
    <RadzenButton IsBusy=@loggingIn Variant="Variant.Flat" ButtonStyle="ButtonStyle.Danger" Click=@(args => OnClickRefresh()) Icon="refresh" />

    <div class="flexRow" style="justify-content:space-evenly">
        <RadzenText TextAlign="TextAlign.Left">
            <RadzenButton Variant="Variant.Flat" Click=@(args => OnResetPassword("reset password")) Text="Reset Password"
                          ButtonStyle="ButtonStyle.Danger" />
        </RadzenText>
        <RadzenText TextAlign="TextAlign.Right">
            <RadzenButton Variant="Variant.Flat" Click=@(args => OnLogout("logging out")) Text="Log Out"
                          ButtonStyle="ButtonStyle.Danger" />
        </RadzenText>
    </div>

    <RadzenCard Class="rz-shadow-0" Style="margin-bottom: 20px; background-color: #EFEFF0; border-radius: 20px;">
        <div>
            <RadzenText TextStyle="TextStyle.H5" Style="color: #F52D11"><strong>Personal Information</strong></RadzenText>
            <RadzenText TextStyle="TextStyle.H5">Name: @sess.currentUser.name</RadzenText>
            <RadzenText TextStyle="TextStyle.H5">Birthday: @sess.currentUser.birthDate.ToLongDateString()</RadzenText>
            <RadzenText TextStyle="TextStyle.H5">Email: @sess.currentUser.id</RadzenText>
        </div>
    </RadzenCard>

    <RadzenCard Class="rz-shadow-0" Style="margin-bottom: 20px; background-color: #EFEFF0; border-radius: 20px;">
        <div>
            <RadzenText TextStyle="TextStyle.H5" Style="color: #F52D11"><strong>Your Booking(s)</strong></RadzenText>
            @for (int i = 0; i < sess.currentUser.eventBookings.Count; i++)
            {
                <BookingCard b=@sess.currentUser.eventBookings[i] />
            }
        </div>

    </RadzenCard>
</body>
}

@code{
    class UserInfo
    {
        public string username { get; set; }
        public string password { get; set; }
    }

    public bool loggingIn = false;

    UserInfo userInfo = new UserInfo();

    async void OnResetPassword(string buttonName)
    {
        await App.Current.MainPage.Navigation.PushAsync(new xChangePassword());
    }

    void OnLogout(string buttonName)
    {
        sess.currentUser = null;
    }

    async void OnLogin()
    {
        loggingIn = true;
        sess.currentUser = await cs.LoginUser(userInfo.username, userInfo.password);
        if (sess.currentUser == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Login Failed", Detail = "Username or password incorrect", Duration = 4000 });
            loggingIn = false;
            StateHasChanged();
            return;
        }
        StateHasChanged();
        loggingIn = false;
        StateHasChanged();

    }

    async void OnRegister(string name)
    {
        await App.Current.MainPage.Navigation.PushAsync(new xSignUp());
    }

    async void OnResetPassword(string value, string name)
    {
        await App.Current.MainPage.Navigation.PushAsync(new xForgotPassword());
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args) { }

    async void OnClickRefresh()
    {
        loggingIn = true;
        StateHasChanged();
        Console.WriteLine("Refresh");
        //cs.museums = await cs.GetMuseums();
        //cs.events = await cs.GetEvents();
        loggingIn = false;
        StateHasChanged();
    }

}