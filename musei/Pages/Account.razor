@page "/account"
@using Radzen
@using musei.Data
@using Microsoft.Maui.Graphics
@using Microsoft.Maui.Layouts
@inject CosmosService cs
@inject Session sess
@inject NotificationService NotificationService


<style>
    body {
        padding: 20px;
    }

    .flexRow {
        display: flex;
        flex-direction: row;
        justify-content: stretch;
    }

    .rightAlign {
        margin-left: auto;
        margin-right: 0;
        align-content: center;
        justify-content: center;
    }

    img {
        max-width: 100%;
        border-radius: 20px;
    }
</style>

<RadzenNotification />


@if (sess.currentUser == null)
{
    <body>
        <div>
            @if (loggingIn)
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            }
            <RadzenText TextStyle="TextStyle.H3"
                        TextAlign="TextAlign.Center" Style="color: #F52D11"><strong>Musei Fantastici</strong></RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" Style="margin-bottom: 20px"
                        TextAlign="TextAlign.Center">Log in with your account and catch up on events personalized to you!</RadzenText>
            <RadzenTemplateForm Data=@("LoginWithRegisterAndReset")>
                <RadzenLogin UserText="Email" LoginText="Log In" Login=@(args => OnLogin(args))
                             ResetPassword=@(args => OnResetPassword(args, "Login with register and password reset"))
                             Register=@(args => OnRegister("Login with register and password reset")) />

            </RadzenTemplateForm>
        </div>
    </body>
}
else
{
    <body>
        <div class="flexRow" style="justify-content:space-evenly">
            <RadzenText TextAlign="TextAlign.Left">
                <RadzenButton Variant="Variant.Flat" Click=@(args => OnResetPassword("reset password")) Text="Reset Password"
                              ButtonStyle="ButtonStyle.Danger" />
            </RadzenText>
            <RadzenText TextAlign="TextAlign.Right">
                <RadzenButton Variant="Variant.Flat" Click=@(args => OnLogout("logging out")) Text="Log Out"
                              ButtonStyle="ButtonStyle.Danger" />
            </RadzenText>
        </div>

        <RadzenCard Class="rz-shadow-0" Style="margin-bottom: 20px; background-color: #EFEFF0; border-radius: 20px;">
            <div>
                <RadzenText TextStyle="TextStyle.H5" Style="color: #F52D11"><strong>Personal Information</strong></RadzenText>
                <RadzenText TextStyle="TextStyle.H5">Name: @sess.currentUser.name</RadzenText>
                <RadzenText TextStyle="TextStyle.H5">Birthday: @sess.currentUser.birthDate.ToLongDateString()</RadzenText>
                <RadzenText TextStyle="TextStyle.H5">Email: @sess.currentUser.id</RadzenText>
            </div>
        </RadzenCard>

        <RadzenCard Class="rz-shadow-0" Style="margin-bottom: 20px; background-color: #EFEFF0; border-radius: 20px;">
            <div>
                <RadzenText TextStyle="TextStyle.H5" Style="color: #F52D11"><strong>Your Booking(s)</strong></RadzenText>
                @for (int i = 0; i < sess.currentUser.eventBookings.Count; i++)
                {
                    <BookingCard b=@sess.currentUser.eventBookings[i] />
                }
            </div>

        </RadzenCard>
    </body>
}

@code{
    public bool loggingIn = false;

    async void OnResetPassword(string buttonName)
    {
        await App.Current.MainPage.Navigation.PushAsync(new xChangePassword());
    }

    void OnLogout(string buttonName)
    {
        sess.currentUser = null;
    }

    async void OnLogin(LoginArgs args)
    {
        loggingIn = true;
        sess.currentUser = await cs.LoginUser(args.Username, args.Password);
        if (sess.currentUser == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Login Failed", Detail = "Username or password incorrect", Duration = 4000 });
            loggingIn = false;
            StateHasChanged();
            return;
        }
        StateHasChanged();
        loggingIn = false;
    }

    async void OnRegister(string name)
    {
        await App.Current.MainPage.Navigation.PushAsync(new xSignUp());
    }

    async void OnResetPassword(string value, string name)
    {
        await App.Current.MainPage.Navigation.PushAsync(new xForgotPassword());
    }
}