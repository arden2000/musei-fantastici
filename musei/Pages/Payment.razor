@page "/payment"
@using musei.Data
@using Radzen
@inject CosmosService cs
@inject Session sess

<style>
    .flexRow {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
    }

    .flexColumn {
        display: flex;
        flex-direction: column;
    }

    .flexStart {
        align-self: flex-start;
    }

    .flexEnd {
        align-self: flex-end;
    }

    .alignleft {
        float: left;
    }

    .alignright {
        float: right;
    }

    .mainColor {
        color: #F52D11;
        background-color: #F52D11;
    }

    body {
        padding: 20px;
    }
</style>

<body>
    <RadzenCard Class="rz-border-base-500 rz-shadow-0" Style="margin-bottom: 20px; background-color: #F5F5F5; border-radius: 20px;">
        <div class="flexColumn">
            <div>
                <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Left" Style="color: #F52D11;"><strong>Price details</strong></RadzenText>
            </div>
            <div class="flexRow">
                <div class="flexStart">
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Left" Style="color: #F52D11;">@sess.currentBooking.people.Count Ticket(s)</RadzenText>
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Left" Style="color: #F52D11;">Taxes and fees</RadzenText>
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Left" Style="color: #F52D11;">Total</RadzenText>

                </div>
                <div class="flexEnd">
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Right" Style="color: #F52D11;">€@totalTicketPrice</RadzenText>
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Right" Style="color: #F52D11;">€@taxesFees</RadzenText>
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Right" Style="color: #F52D11;">€@total</RadzenText>
                </div>
            </div>
        </div>
    </RadzenCard>
    <RadzenTemplateForm Submit=@OnSubmit
                        InvalidSubmit=@OnInvalidSubmit
                        TItem="PaymentCard"
                        Data=@newPayment>
        <div>
            <RadzenAutoComplete Style="border-radius: 10px; width: 100%;" @bind-Value=@newPayment.name Placeholder="Name on card" Name="name"/>
            <RadzenRequiredValidator Component="name" Text="Name is required" Popup=false Style="position: static" />
            <RadzenAutoComplete Style="border-radius: 10px; width: 100%;" @bind-Value=@newPayment.cardNum Placeholder="Debit/Credit ca rd number" Name="creditCard"/>
            <RadzenRequiredValidator Component="creditCard" Text="Debit/Credit card number is required" Popup=false Style="position: static" />
            <RadzenAutoComplete Style="border-radius: 10px; width: 100%; " @bind-Value=@newPayment.expiration Placeholder ="Expiration date MM/YY" Name="expiration" />
            <RadzenRequiredValidator Component="expiration" Text="Expiration date is required" Popup=false Style="position: static" />
            <RadzenAutoComplete Style="border-radius: 10px; width: 100%;" @bind-Value=@newPayment.securityCode Placeholder ="Security code" Name="securityCode" />
            <RadzenRequiredValidator Component="securityCode" Text="Security code is required" Popup=false Style="position: static" />
            <RadzenAutoComplete Style="border-radius: 10px; width: 100%;" @bind-Value=@newPayment.zipCode Placeholder ="Zip code" Name="zip" />
            <RadzenRequiredValidator Component="zip" Text="Zip code is required" Popup=false Style="position: static" />
        </div>
        <RadzenButton class="mainColor" Style="width: 100%;"
                      ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Text="Pay now" ButtonType="ButtonType.Submit" />
    </RadzenTemplateForm>
</body>



@code {
    class PaymentCard
    {
        public string name { get; set; }
        public string cardNum { get; set; }
        public string expiration { get; set; }
        public string securityCode { get; set; }
        public string zipCode { get; set; }
    }

    PaymentCard newPayment = new PaymentCard();

    public double totalTicketPrice { get; set; }

    public double taxesFees { get; set; }

    public double total { get; set; }

    public double calculateTicketPrice(int numberOfTickets, double pricePerTicket)
    {
        return (double)numberOfTickets * pricePerTicket;
    }

    public double calculateTotalPrice(double Total, double pricePerTicket)
    {
        return totalTicketPrice + taxesFees;
    }

    public double calculateTaxes(double Total, double taxRate)
    {
        return totalTicketPrice * taxRate;
    }

    public double truncate(double num)
    {
        string stringNum = num.ToString();
        stringNum = stringNum.Substring(0, stringNum.IndexOf(".") + 2);
        return Convert.ToDouble(stringNum);
    }

    async void OnSubmit()
    {
        sess.currentUser.eventBookings.Add(sess.currentBooking);
        Console.WriteLine(sess.currentUser.eventBookings[0]);
        Console.WriteLine(sess.currentUser.eventBookings[0].people[0]);

        await cs.UpsertUser(sess.currentUser);
        //sess.currentBooking = null;
        await App.Current.MainPage.Navigation.PushAsync(new xBookingConfirmation());
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args) { }

    protected override void OnInitialized()
    {
        totalTicketPrice = calculateTicketPrice(sess.currentBooking.people.Count, sess.currentEvent.price);
        taxesFees = truncate(calculateTaxes(totalTicketPrice, 0.1));
        total = calculateTotalPrice(totalTicketPrice, taxesFees);
    }


}